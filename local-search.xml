<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NOI-高精度运算</title>
    <link href="/2019/10/04/NOI-%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%BF%90%E7%AE%97/"/>
    <url>/2019/10/04/NOI-%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>本文将分享NOI中常见的几种高精度算法</p><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><blockquote><p>高精度计算是一种程序设计的算法。由于中央处理器的字长限制，如32位CPU中一个整数最大只能取值4,294,967,295。因此在进行更大范围的数值计算中，往往要采取模拟手段。通常通过分离字符的方法通过数字数组进行输入。通过数组倒序输出。通过模拟竖式计算进行计算。一般而言，主要模拟的是按位运算，可以用不同的进位制达成不同的目的。</p><p><em>——Wikipedia</em></p></blockquote><h2 id="加法"><a class="markdownIt-Anchor" href="#加法"></a> 加法</h2><pre class="highlight"><code class="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>{    <span class="hljs-keyword">char</span> c;    <span class="hljs-keyword">int</span> tmp[<span class="hljs-number">101</span>] = {};    <span class="hljs-keyword">while</span> ((c = <span class="hljs-built_in">cin</span>.get()) != <span class="hljs-string">'\n'</span>)    {        tmp[<span class="hljs-number">0</span>]++;        tmp[tmp[<span class="hljs-number">0</span>]] = c - <span class="hljs-string">'0'</span>;    }    arr[<span class="hljs-number">0</span>] = tmp[<span class="hljs-number">0</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = tmp[<span class="hljs-number">0</span>]; i &gt;= <span class="hljs-number">1</span>; i--)    {        arr[tmp[<span class="hljs-number">0</span>] - i + <span class="hljs-number">1</span>] = tmp[i]; <span class="hljs-comment">// 倒序存入</span>    }}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> b[],<span class="hljs-keyword">int</span> c[])</span></span>{    <span class="hljs-keyword">int</span> maxLen, x = <span class="hljs-number">0</span>; <span class="hljs-comment">// maxLen即可能的最大长度, x即向更高一位的进位</span>    <span class="hljs-keyword">if</span> (a[<span class="hljs-number">0</span>] &gt;= b[<span class="hljs-number">0</span>])    {        maxLen = a[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>;    }    <span class="hljs-keyword">else</span>    {        maxLen = b[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>;    }    c[<span class="hljs-number">0</span>] = maxLen;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= maxLen; i++) <span class="hljs-comment">// 一位一位向高位计算</span>    {        c[i] = a[i] + b[i] + x;        <span class="hljs-keyword">if</span> (c[i] &gt;= <span class="hljs-number">10</span>)        {            x = c[i] / <span class="hljs-number">10</span>;            c[i] -= <span class="hljs-number">10</span>;        }    }    <span class="hljs-keyword">if</span> (c[maxLen] == <span class="hljs-number">0</span>) <span class="hljs-comment">// 若最高位为0则舍去最高位</span>    {        c[<span class="hljs-number">0</span>]--;    }}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr[<span class="hljs-number">0</span>]; i &gt;= <span class="hljs-number">1</span>; i--)    {        <span class="hljs-built_in">cout</span> &lt;&lt; arr[i]; <span class="hljs-comment">// 倒序输出</span>    }    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{    <span class="hljs-keyword">int</span> a[<span class="hljs-number">101</span>] = {}, b[<span class="hljs-number">101</span>] = {}, c[<span class="hljs-number">101</span>] = {};    input(a);    input(b);    sum(a, b, c);    output(c);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}</code></pre><h2 id="减法"><a class="markdownIt-Anchor" href="#减法"></a> 减法</h2><pre class="highlight"><code class="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>{    <span class="hljs-keyword">char</span> c;    <span class="hljs-keyword">int</span> tmp[<span class="hljs-number">101</span>] = {};    <span class="hljs-keyword">while</span> ((c = <span class="hljs-built_in">cin</span>.get()) != <span class="hljs-string">'\n'</span>)    {        tmp[<span class="hljs-number">0</span>]++;        tmp[tmp[<span class="hljs-number">0</span>]] = c - <span class="hljs-string">'0'</span>;    }    arr[<span class="hljs-number">0</span>] = tmp[<span class="hljs-number">0</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = tmp[<span class="hljs-number">0</span>]; i &gt;= <span class="hljs-number">1</span>; i--)    {        arr[tmp[<span class="hljs-number">0</span>] - i + <span class="hljs-number">1</span>] = tmp[i];    }}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> b[],<span class="hljs-keyword">int</span> c[])</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a[<span class="hljs-number">0</span>]; i++)    {        c[i] = a[i] - b[i];        <span class="hljs-keyword">if</span> (c[i] &lt; <span class="hljs-number">0</span>)        {            a[i + <span class="hljs-number">1</span>]--;            c[i] += <span class="hljs-number">10</span>;        }    }    c[<span class="hljs-number">0</span>] = a[<span class="hljs-number">0</span>];    <span class="hljs-keyword">while</span> (c[c[<span class="hljs-number">0</span>]] == <span class="hljs-number">0</span>)    {        c[<span class="hljs-number">0</span>]--;    }}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr[<span class="hljs-number">0</span>]; i &gt;= <span class="hljs-number">1</span>; i--)    {        <span class="hljs-built_in">cout</span> &lt;&lt; arr[i];    }    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{    <span class="hljs-keyword">int</span> a[<span class="hljs-number">101</span>] = {}, b[<span class="hljs-number">101</span>] = {}, c[<span class="hljs-number">101</span>] = {};    input(a);    input(b);    sub(a, b, c); <span class="hljs-comment">// 默认a-b大于0</span>    output(c);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}</code></pre><h2 id="乘法"><a class="markdownIt-Anchor" href="#乘法"></a> 乘法</h2><p><img src="https://i.loli.net/2019/08/08/YPBSGXnL7bHDNid.jpg" srcset="/img/loading.gif" alt="乘法.jpg" /></p><pre class="highlight"><code class="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>{    <span class="hljs-keyword">char</span> c;    <span class="hljs-keyword">int</span> tmp[<span class="hljs-number">101</span>] = {};    <span class="hljs-keyword">while</span> ((c = <span class="hljs-built_in">cin</span>.get()) != <span class="hljs-string">'\n'</span>)    {        tmp[<span class="hljs-number">0</span>]++;        tmp[tmp[<span class="hljs-number">0</span>]] = c - <span class="hljs-string">'0'</span>;    }    arr[<span class="hljs-number">0</span>] = tmp[<span class="hljs-number">0</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = tmp[<span class="hljs-number">0</span>]; i &gt;= <span class="hljs-number">1</span>; i--)    {        arr[tmp[<span class="hljs-number">0</span>] - i + <span class="hljs-number">1</span>] = tmp[i];    }}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> b[],<span class="hljs-keyword">int</span> c[])</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> indexB = <span class="hljs-number">1</span>; indexB &lt;= b[<span class="hljs-number">0</span>]; indexB++)    {        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> indexA = <span class="hljs-number">1</span>; indexA &lt;= a[<span class="hljs-number">0</span>]; indexA++)        {            c[indexA + indexB - <span class="hljs-number">1</span>] += a[indexA] * b[indexB];            <span class="hljs-keyword">if</span> (c[indexA + indexB - <span class="hljs-number">1</span>] &gt;= <span class="hljs-number">10</span>)            {                c[indexA + indexB - <span class="hljs-number">1</span> + <span class="hljs-number">1</span>] += c[indexA + indexB - <span class="hljs-number">1</span>] / <span class="hljs-number">10</span>;                c[indexA + indexB - <span class="hljs-number">1</span>] %= <span class="hljs-number">10</span>;            }        }    }    c[<span class="hljs-number">0</span>] = a[<span class="hljs-number">0</span>] + b[<span class="hljs-number">0</span>];    <span class="hljs-keyword">while</span> (c[c[<span class="hljs-number">0</span>]] == <span class="hljs-number">0</span>)    {        c[<span class="hljs-number">0</span>]--;    }}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr[<span class="hljs-number">0</span>]; i &gt;= <span class="hljs-number">1</span>; i--)    {        <span class="hljs-built_in">cout</span> &lt;&lt; arr[i];    }    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{    <span class="hljs-keyword">int</span> a[<span class="hljs-number">101</span>] = {}, b[<span class="hljs-number">101</span>] = {}, c[<span class="hljs-number">201</span>] = {};    input(a);    input(b);    mul(a, b, c);    output(c);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}</code></pre>]]></content>
    
    
    <categories>
      
      <category>NOI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高精度运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>教程-Bilibili弹幕转ASS字幕</title>
    <link href="/2019/09/14/%E6%95%99%E7%A8%8B-Bilibili%E5%BC%B9%E5%B9%95%E8%BD%ACASS%E5%AD%97%E5%B9%95/"/>
    <url>/2019/09/14/%E6%95%99%E7%A8%8B-Bilibili%E5%BC%B9%E5%B9%95%E8%BD%ACASS%E5%AD%97%E5%B9%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>本文将介绍Bilibili的弹幕机制与将弹幕转换为ASS字幕的方法</p><p>项目地址：<a href="https://github.com/DreamWalkerXZ/BilibiliDanmu2Ass" target="_blank" rel="noopener">🚀Github</a></p><h2 id="bilibili的弹幕机制"><a class="markdownIt-Anchor" href="#bilibili的弹幕机制"></a> Bilibili的弹幕机制</h2><h3 id="获取弹幕"><a class="markdownIt-Anchor" href="#获取弹幕"></a> 获取弹幕</h3><p>Bilibili的弹幕储存于<a href="https://comment.bilibili.com/%E8%A7%86%E9%A2%91%E7%9A%84cid.xml" target="_blank" rel="noopener">https://comment.bilibili.com/视频的cid.xml</a></p><p>在Bilibili上，每个视频拥有自己的av编号即所谓aid，而如果是合集的视频其aid会重合，不便于区分，所以Bilibili为每个视频（包括合集中的分视频）创建了其独有的cid</p><p>至于cid如何获取，只需要在视频播放页面的源代码中，找到cid字段后面的值即可</p><p><img src="https://i.loli.net/2019/08/20/nTHWOoVUJkRw148.png" srcset="/img/loading.gif" alt="getCidBrowser.png" /></p><pre class="highlight"><code class="python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cid</span><span class="hljs-params">(url)</span>:</span>    headers = {<span class="hljs-string">"user-agent"</span>: <span class="hljs-string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.87 Safari/537.36"</span>}    html = requests.get(url, headers = headers).content.decode(<span class="hljs-string">'utf-8'</span>)    <span class="hljs-keyword">if</span> <span class="hljs-string">"cid"</span> <span class="hljs-keyword">in</span> html:        <span class="hljs-keyword">return</span> re.search(<span class="hljs-string">r'"cid":(\d*)'</span>, html).group(<span class="hljs-number">1</span>)    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">"x"</span></code></pre><h3 id="弹幕格式"><a class="markdownIt-Anchor" href="#弹幕格式"></a> 弹幕格式</h3><p><img src="https://i.loli.net/2019/08/20/IZuCMF2jaf7hXH3.png" srcset="/img/loading.gif" alt="Danmu_XML.png" /></p><p>我们把这一条弹幕再抽象一下，也就是：</p><pre class="highlight"><code class="python">danmu = <span class="hljs-string">'&lt;d p="弹幕出现的时间,弹幕的模式,弹幕的字体大小,弹幕的颜色,Unix时间戳,弹幕池,弹幕发送者的ID,弹幕在弹幕数据库中的rowID"&gt;弹幕的内容&lt;/d&gt;'</span></code></pre><ul><li>弹幕出现的时间，以秒为单位</li><li>弹幕的模式：1～3 滚动弹幕 4 底端弹幕 5 顶端弹幕 6 逆向弹幕 7 精准定位 8 高级弹幕</li><li>弹幕的字体大小：12 非常小 16 特小 18 小 25 中 36 大 45 很大 64 特别大</li><li>弹幕的颜色：将 HTML 六位十六进制颜色转为十进制表示，例如 #FFFFFF 会被存储为 16777215</li><li>Unix 时间戳，以毫秒为单位，基准时间为 1970-1-1 08:00:00</li><li>弹幕池：0 普通池 1 字幕池 2 特殊池（注：目前特殊池为高级弹幕专用）</li><li>弹幕发送者的ID，用于『屏蔽此弹幕的发送者』功能</li><li>弹幕在弹幕数据库中的rowID，用于『历史弹幕』功能</li></ul><blockquote><p>感谢**@张书樵**对弹幕数据格式的解析——<br /><em><a href="https://zhangshuqiao.org/2018-03/Bilibili%E5%BC%B9%E5%B9%95%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">https://zhangshuqiao.org/2018-03/Bilibili弹幕文件的解析/</a></em></p></blockquote><h2 id="将弹幕转换为ass字幕"><a class="markdownIt-Anchor" href="#将弹幕转换为ass字幕"></a> 将弹幕转换为ASS字幕</h2><h3 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h3><p>要制作字幕的话，我们需要的有效数据有：<strong>弹幕出现的时间</strong>+<strong>弹幕的模式</strong>+<strong>弹幕的颜色</strong>+<strong>弹幕的内容</strong>。</p><pre class="highlight"><code class="python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Danmu</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, appear_time, disappear_time, mode, color, text)</span>:</span>        self.appear_time = appear_time        self.disappear_time = disappear_time        self.mode = mode        self.color = color        <span class="hljs-keyword">if</span> self.color == <span class="hljs-string">r"\c&amp;HFFFFFF"</span>: <span class="hljs-comment"># 默认白色则删去,压缩空间</span>            self.color = <span class="hljs-string">""</span>        self.text = text</code></pre><h3 id="数据处理封装数据"><a class="markdownIt-Anchor" href="#数据处理封装数据"></a> 数据处理&amp;封装数据</h3><pre class="highlight"><code class="python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">format_time</span><span class="hljs-params">(time_raw)</span>:</span> <span class="hljs-comment"># 把时间格式化为ASS字幕中的时间格式</span>    hour = str(int(time_raw / <span class="hljs-number">3600</span>))    <span class="hljs-keyword">if</span> hour != <span class="hljs-string">'0'</span>:        time_raw %= <span class="hljs-number">3600</span>    minute = str(int(time_raw / <span class="hljs-number">60</span>))    <span class="hljs-keyword">if</span> minute != <span class="hljs-string">'0'</span>:        time_raw %= <span class="hljs-number">60</span>    <span class="hljs-keyword">if</span> len(minute) == <span class="hljs-number">1</span>:        minute = <span class="hljs-string">"0"</span> + minute    second = str(round(time_raw, <span class="hljs-number">2</span>))    <span class="hljs-keyword">if</span> <span class="hljs-string">'.'</span> <span class="hljs-keyword">in</span> second:        <span class="hljs-keyword">if</span> len(second.split(<span class="hljs-string">'.'</span>)[<span class="hljs-number">0</span>]) == <span class="hljs-number">1</span>:            second = <span class="hljs-string">"0"</span> + second        <span class="hljs-keyword">if</span> len(second.split(<span class="hljs-string">'.'</span>)[<span class="hljs-number">1</span>]) == <span class="hljs-number">1</span>:            second = second + <span class="hljs-string">"0"</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">if</span> len(second) == <span class="hljs-number">1</span>:            second = <span class="hljs-string">"0"</span> + second + <span class="hljs-string">".00"</span>        <span class="hljs-keyword">else</span>:            second = second + <span class="hljs-string">".00"</span>    <span class="hljs-keyword">return</span> hour + <span class="hljs-string">':'</span> + minute + <span class="hljs-string">':'</span> + second<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_danmu_list</span><span class="hljs-params">(danmu_url)</span>:</span>    danmu_raw = requests.get(danmu_url, headers = headers).content.decode(<span class="hljs-string">'utf-8'</span>)    danmu_raw_list = re.findall(<span class="hljs-string">r"&lt;d .*?&lt;/d&gt;"</span>, danmu_raw)    danmu_list = []    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> danmu_raw_list:        m = re.match(<span class="hljs-string">r'&lt;d p="(.*?),(.*?),(.*?),(.*?),(.*?)&gt;(.*?)&lt;/d&gt;'</span>, item) <span class="hljs-comment"># group(3)和group(5)不需要</span>        danmu_list.append(Danmu(format_time(float(m.group(<span class="hljs-number">1</span>))), format_time(float(m.group(<span class="hljs-number">1</span>)) + <span class="hljs-number">8</span>), int(m.group(<span class="hljs-number">2</span>)), <span class="hljs-string">r"\c&amp;H"</span> + str(hex(int(m.group(<span class="hljs-number">4</span>))))[<span class="hljs-number">2</span>:].upper(), m.group(<span class="hljs-number">6</span>)))    <span class="hljs-keyword">return</span> danmu_list<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_ass</span><span class="hljs-params">(danmu_list)</span>:</span>    ass = <span class="hljs-string">"""[Script Info]Title: Bilibili弹幕转ASS字幕Original Script: 由 https://github.com/dreamwalkerxz 制作ScriptType: v4.00+Collisions: NormalPlayResX: 560PlayResY: 420Timer: 10.0000[V4+ Styles]Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, EncodingStyle: Fix,Microsoft YaHei UI,25,&amp;H66FFFFFF,&amp;H66FFFFFF,&amp;H66000000,&amp;H66000000,0,0,0,0,100,100,0,0,1,1,0,2,20,20,2,0Style: R2L,Microsoft YaHei UI,25,&amp;H66FFFFFF,&amp;H66FFFFFF,&amp;H66000000,&amp;H66000000,0,0,0,0,100,100,0,0,1,1,0,2,20,20,2,0[Events]Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text"""</span>    currentY = <span class="hljs-number">1</span> <span class="hljs-comment"># currentY * 25 -&gt; Y .. currentY = 1 -&gt; 16</span>    <span class="hljs-keyword">for</span> danmu <span class="hljs-keyword">in</span> danmu_list:        style = <span class="hljs-string">""</span>        startX = <span class="hljs-number">620</span> <span class="hljs-comment"># 接近于平均值</span>        endX = -(startX - <span class="hljs-number">560</span>)        <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &lt;= danmu.mode <span class="hljs-keyword">and</span> danmu.mode &lt;= <span class="hljs-number">3</span>:            style = <span class="hljs-string">"R2L"</span>        <span class="hljs-keyword">else</span>:            style = <span class="hljs-string">"FIX"</span>            startX = <span class="hljs-number">280</span>            endX = <span class="hljs-number">280</span>        Y = currentY * <span class="hljs-number">25</span>        currentY += <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> currentY == <span class="hljs-number">17</span>:            currentY = <span class="hljs-number">1</span>        ass += <span class="hljs-string">"Dialogue: 0,%s,%s,%s,,20,20,2,,{\\move(%d,%d,%d,%d)%s}%s\n"</span> % (danmu.appear_time, danmu.disappear_time, style, startX, Y, endX, Y, danmu.color, danmu.text)    <span class="hljs-keyword">return</span> ass</code></pre><h2 id="成果展示"><a class="markdownIt-Anchor" href="#成果展示"></a> 成果展示</h2><p>项目地址：<a href="https://github.com/DreamWalkerXZ/BilibiliDanmu2Ass" target="_blank" rel="noopener">🚀Github</a></p><h3 id="主程序"><a class="markdownIt-Anchor" href="#主程序"></a> 主程序</h3><pre class="highlight"><code class="python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> reheaders = {<span class="hljs-string">"user-agent"</span>: <span class="hljs-string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.87 Safari/537.36"</span>}<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Danmu</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, appear_time, disappear_time, mode, color, text)</span>:</span>        self.appear_time = appear_time        self.disappear_time = disappear_time        self.mode = mode        self.color = color        <span class="hljs-keyword">if</span> self.color == <span class="hljs-string">r"\c&amp;HFFFFFF"</span>: <span class="hljs-comment"># 默认白色则删去,压缩空间</span>            self.color = <span class="hljs-string">""</span>        self.text = text<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cid</span><span class="hljs-params">(url)</span>:</span>    html = requests.get(url, headers = headers).content.decode(<span class="hljs-string">'utf-8'</span>)    <span class="hljs-keyword">if</span> <span class="hljs-string">"cid"</span> <span class="hljs-keyword">in</span> html:        <span class="hljs-keyword">return</span> re.search(<span class="hljs-string">r'"cid":(\d*)'</span>, html).group(<span class="hljs-number">1</span>)    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">"x"</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">format_time</span><span class="hljs-params">(time_raw)</span>:</span>    hour = str(int(time_raw / <span class="hljs-number">3600</span>))    <span class="hljs-keyword">if</span> hour != <span class="hljs-string">'0'</span>:        time_raw %= <span class="hljs-number">3600</span>    minute = str(int(time_raw / <span class="hljs-number">60</span>))    <span class="hljs-keyword">if</span> minute != <span class="hljs-string">'0'</span>:        time_raw %= <span class="hljs-number">60</span>    <span class="hljs-keyword">if</span> len(minute) == <span class="hljs-number">1</span>:        minute = <span class="hljs-string">"0"</span> + minute    second = str(round(time_raw, <span class="hljs-number">2</span>))    <span class="hljs-keyword">if</span> <span class="hljs-string">'.'</span> <span class="hljs-keyword">in</span> second:        <span class="hljs-keyword">if</span> len(second.split(<span class="hljs-string">'.'</span>)[<span class="hljs-number">0</span>]) == <span class="hljs-number">1</span>:            second = <span class="hljs-string">"0"</span> + second        <span class="hljs-keyword">if</span> len(second.split(<span class="hljs-string">'.'</span>)[<span class="hljs-number">1</span>]) == <span class="hljs-number">1</span>:            second = second + <span class="hljs-string">"0"</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">if</span> len(second) == <span class="hljs-number">1</span>:            second = <span class="hljs-string">"0"</span> + second + <span class="hljs-string">".00"</span>        <span class="hljs-keyword">else</span>:            second = second + <span class="hljs-string">".00"</span>    <span class="hljs-keyword">return</span> hour + <span class="hljs-string">':'</span> + minute + <span class="hljs-string">':'</span> + second<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_danmu_list</span><span class="hljs-params">(danmu_url)</span>:</span>    danmu_raw = requests.get(danmu_url, headers = headers).content.decode(<span class="hljs-string">'utf-8'</span>)    danmu_raw_list = re.findall(<span class="hljs-string">r"&lt;d .*?&lt;/d&gt;"</span>, danmu_raw)    danmu_list = []    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> danmu_raw_list:        m = re.match(<span class="hljs-string">r'&lt;d p="(.*?),(.*?),(.*?),(.*?),(.*?)&gt;(.*?)&lt;/d&gt;'</span>, item) <span class="hljs-comment"># group(3和5)废弃</span>        danmu_list.append(Danmu(format_time(float(m.group(<span class="hljs-number">1</span>))), format_time(float(m.group(<span class="hljs-number">1</span>)) + <span class="hljs-number">8</span>), int(m.group(<span class="hljs-number">2</span>)), <span class="hljs-string">r"\c&amp;H"</span> + str(hex(int(m.group(<span class="hljs-number">4</span>))))[<span class="hljs-number">2</span>:].upper(), m.group(<span class="hljs-number">6</span>)))    <span class="hljs-keyword">return</span> danmu_list<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_ass</span><span class="hljs-params">(danmu_list)</span>:</span>    ass = <span class="hljs-string">"""[Script Info]Title: Bilibili弹幕转ASS字幕Original Script: 由 https://github.com/dreamwalkerxz 制作ScriptType: v4.00+Collisions: NormalPlayResX: 560PlayResY: 420Timer: 10.0000[V4+ Styles]Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, EncodingStyle: Fix,Microsoft YaHei UI,25,&amp;H66FFFFFF,&amp;H66FFFFFF,&amp;H66000000,&amp;H66000000,0,0,0,0,100,100,0,0,1,1,0,2,20,20,2,0Style: R2L,Microsoft YaHei UI,25,&amp;H66FFFFFF,&amp;H66FFFFFF,&amp;H66000000,&amp;H66000000,0,0,0,0,100,100,0,0,1,1,0,2,20,20,2,0[Events]Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text"""</span>    currentY = <span class="hljs-number">1</span> <span class="hljs-comment"># currentY * 25 -&gt; Y .. currentY = 1 -&gt; 16</span>    <span class="hljs-keyword">for</span> danmu <span class="hljs-keyword">in</span> danmu_list:        style = <span class="hljs-string">""</span>        startX = <span class="hljs-number">620</span> <span class="hljs-comment"># likely to be the average</span>        endX = -(startX - <span class="hljs-number">560</span>)        <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &lt;= danmu.mode <span class="hljs-keyword">and</span> danmu.mode &lt;= <span class="hljs-number">3</span>:            style = <span class="hljs-string">"R2L"</span>        <span class="hljs-keyword">else</span>:            style = <span class="hljs-string">"FIX"</span>            startX = <span class="hljs-number">280</span>            endX = <span class="hljs-number">280</span>        Y = currentY * <span class="hljs-number">25</span>        currentY += <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> currentY == <span class="hljs-number">17</span>:            currentY = <span class="hljs-number">1</span>        ass += <span class="hljs-string">"Dialogue: 0,%s,%s,%s,,20,20,2,,{\\move(%d,%d,%d,%d)%s}%s\n"</span> % (danmu.appear_time, danmu.disappear_time, style, startX, Y, endX, Y, danmu.color, danmu.text)    <span class="hljs-keyword">return</span> ass<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    url = input(<span class="hljs-string">"url:"</span>)    cid = get_cid(url)    <span class="hljs-keyword">if</span> cid == <span class="hljs-string">"x"</span>:        print(<span class="hljs-string">"cid not found"</span>)        exit(<span class="hljs-number">1</span>)    danmu_url = <span class="hljs-string">"https://comment.bilibili.com/"</span> + cid + <span class="hljs-string">".xml"</span>    danmu_list = get_danmu_list(danmu_url)    ass = generate_ass(danmu_list)    <span class="hljs-keyword">with</span> open(cid + <span class="hljs-string">".ass"</span>, <span class="hljs-string">"wb+"</span>) <span class="hljs-keyword">as</span> ass_file:        ass_file.write(ass.encode(<span class="hljs-string">"utf-8"</span>))<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    main()</code></pre><h3 id="使用方法"><a class="markdownIt-Anchor" href="#使用方法"></a> 使用方法</h3><pre class="highlight"><code class="shell">git clone https://github.com/DreamWalkerXZ/BilibiliDanmu2Ass.gitcd ./BilibiliDanmu2Asspython3 main.py # 输入为B站视频地址, 输出为该视频cid.ass字幕文件(在当前目录)</code></pre>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bilibili</tag>
      
      <tag>字幕</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NOI-排序算法</title>
    <link href="/2019/05/26/NOI-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2019/05/26/NOI-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>本文将分享NOI中常见的几种排序算法</p><blockquote><p>本文中使用的定义来源于Wikipedia。<br />本文中使用的图片除最后一张来源于cnblogs之外，其他图片均来源于VisuAlgo。<br />本文中的C++代码除归并排序处引用自Wikipedia，其他的排序的代码均为本人所写。</p></blockquote><h2 id="调用algorithm进行排序"><a class="markdownIt-Anchor" href="#调用algorithm进行排序"></a> 🤣调用algorithm进行排序</h2><p>algorithm中的std::sort()函数可以方便地进行排序，如果题目没有特殊要求，可以直接调用此函数。</p><p>C++代码</p><pre class="highlight"><code class="c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-comment">/* your code ... */</span>sort(arr, arr + arr_len);<span class="hljs-comment">/* your code ... */</span></code></pre><h2 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 🧼冒泡排序</h2><p>冒泡排序（英语：Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢「浮」到数列的顶端。</p><p><img src="https://i.loli.net/2019/06/29/5d16d824c545187370.gif" srcset="/img/loading.gif" alt="冒泡排序.gif" /></p><p>C++代码</p><pre class="highlight"><code class="c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10000</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> len)</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--)    {        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)        {            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])            {                swap(arr[j], arr[j + <span class="hljs-number">1</span>]);            }        }    }}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>{    <span class="hljs-keyword">int</span> len;    <span class="hljs-built_in">cin</span> &gt;&gt; len;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)    {        <span class="hljs-built_in">cin</span> &gt;&gt; arr[i];    }    <span class="hljs-keyword">return</span> len;}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> len)</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)    {        <span class="hljs-built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">' '</span>;    }    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{    <span class="hljs-keyword">int</span> arr[N], len;    len = input(arr);    bubble_sort(arr, len);    output(arr, len);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}</code></pre><h2 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 👆选择排序</h2><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><p><img src="https://i.loli.net/2019/06/29/5d16d85e0784844278.gif" srcset="/img/loading.gif" alt="选择排序.gif" /></p><p>C++代码</p><pre class="highlight"><code class="c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10000</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selection_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> len)</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)    {        <span class="hljs-keyword">int</span> <span class="hljs-built_in">min</span> = i;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++)        {            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[<span class="hljs-built_in">min</span>])            {                <span class="hljs-built_in">min</span> = j;            }        }        swap(arr[i], arr[<span class="hljs-built_in">min</span>]);    }}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>{    <span class="hljs-keyword">int</span> len;    <span class="hljs-built_in">cin</span> &gt;&gt; len;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)    {        <span class="hljs-built_in">cin</span> &gt;&gt; arr[i];    }    <span class="hljs-keyword">return</span> len;}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> len)</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)    {        <span class="hljs-built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">' '</span>;    }    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{    <span class="hljs-keyword">int</span> arr[N], len;    len = input(arr);    selection_sort(arr, len);    output(arr, len);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}</code></pre><h2 id="️插入排序"><a class="markdownIt-Anchor" href="#️插入排序"></a> 🀄️插入排序</h2><p>插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p><img src="https://i.loli.net/2019/06/29/5d16ddc9b821858475.gif" srcset="/img/loading.gif" alt="插入排序.gif" /></p><p>C++代码</p><pre class="highlight"><code class="c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10000</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertion_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> len)</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i++)    {        <span class="hljs-keyword">int</span> key = arr[i];        <span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span> ((j &gt;= <span class="hljs-number">0</span>) &amp;&amp; (key &lt; arr[j]))        {            arr[j + <span class="hljs-number">1</span>] = arr[j];            j--;        }        arr[j + <span class="hljs-number">1</span>] = key;    }}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>{    <span class="hljs-keyword">int</span> len;    <span class="hljs-built_in">cin</span> &gt;&gt; len;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)    {        <span class="hljs-built_in">cin</span> &gt;&gt; arr[i];    }    <span class="hljs-keyword">return</span> len;}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> len)</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)    {        <span class="hljs-built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">' '</span>;    }    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{    <span class="hljs-keyword">int</span> arr[N], len;    len = input(arr);    insertion_sort(arr, len);    output(arr, len);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}</code></pre><h2 id="桶排序"><a class="markdownIt-Anchor" href="#桶排序"></a> 📦桶排序</h2><p>桶排序（Bucket sort）或所谓的箱排序，是一个排序演算法，工作的原理是将阵列分到有限数量的桶里。每个桶再个别排序（有可能再使用别的排序演算法或是以递归方式继续使用桶排序进行排序）。</p><p><img src="https://i.loli.net/2019/07/06/5d20b1d191b6870108.gif" srcset="/img/loading.gif" alt="桶排序.gif" /></p><p>C++代码</p><pre class="highlight"><code class="c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10000</span>;<span class="hljs-keyword">int</span> bucket[N] = {};<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bucket_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> bucket[], <span class="hljs-keyword">int</span> len)</span> </span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) {        bucket[arr[i]]++;    }}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>{    <span class="hljs-keyword">int</span> len;    <span class="hljs-built_in">cin</span> &gt;&gt; len;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)    {        <span class="hljs-built_in">cin</span> &gt;&gt; arr[i];    }    <span class="hljs-keyword">return</span> len;}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> bucket[], <span class="hljs-keyword">int</span> len)</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)    {        <span class="hljs-keyword">while</span> (bucket[i]) {            <span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">' '</span>;            bucket[i]--;        }    }    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{    <span class="hljs-keyword">int</span> arr[N], bucket[N] = {}, len;    len = input(arr);    bucket_sort(arr, bucket, len);    output(bucket, len);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}</code></pre><h2 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 🏇快速排序</h2><p>快速排序（英语：Quicksort），又称划分交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔提出。在平均状况下，排序n个项目要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>次比较。在最坏状况下则需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>次比较，但这种状况并不常见。事实上，快速排序<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>通常明显比其他演算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地达成。</p><p><img src="https://i.loli.net/2019/07/13/5d29dac480e0296026.gif" srcset="/img/loading.gif" alt="快速排序.gif" /></p><p>C++代码</p><pre class="highlight"><code class="c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10000</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> head, <span class="hljs-keyword">int</span> tail)</span></span>{    <span class="hljs-keyword">if</span> (head &gt;= tail)    {        <span class="hljs-keyword">return</span>;    }    <span class="hljs-keyword">int</span> i = head, j = tail;    <span class="hljs-keyword">int</span> pivot = arr[head];  <span class="hljs-comment">// 通常取第一个数为基准</span>    <span class="hljs-keyword">while</span> (i &lt; j) <span class="hljs-comment">// i,j 相遇即退出循环</span>    {        <span class="hljs-keyword">while</span> (i &lt; j <span class="hljs-keyword">and</span> arr[j] &gt;= pivot) <span class="hljs-comment">// 从右向左扫描，将比基准小的数填到左边</span>        {            j--;        }        arr[i] = arr[j];        <span class="hljs-keyword">while</span> (i &lt; j <span class="hljs-keyword">and</span> arr[i] &lt;= pivot) <span class="hljs-comment">// 从左向右扫描，将比基准大的数填到右边</span>        {            i++;        }        arr[j] = arr[i];    }    arr[i] = pivot; <span class="hljs-comment">// 将基准数填回</span>    quick_sort(arr, head, i - <span class="hljs-number">1</span>); <span class="hljs-comment">// 以基准数为界左右分治</span>    quick_sort(arr, j + <span class="hljs-number">1</span>, tail);}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>{    <span class="hljs-keyword">int</span> len;    <span class="hljs-built_in">cin</span> &gt;&gt; len;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)    {        <span class="hljs-built_in">cin</span> &gt;&gt; arr[i];    }    <span class="hljs-keyword">return</span> len;}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> len)</span></span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)    {        <span class="hljs-built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">' '</span>;    }    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;}<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{    <span class="hljs-keyword">int</span> arr[N], len;    len = input(arr);    quick_sort(arr, <span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>);    output(arr, len);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}</code></pre><h2 id="归并排序二路"><a class="markdownIt-Anchor" href="#归并排序二路"></a> 🎛归并排序(二路)</h2><p>归并排序（英语：Merge sort，或mergesort），是建立在归并操作上的一种有效的排序算法，效率為<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。</p><p><img src="https://i.loli.net/2019/07/24/5d387662c1f1f47165.png" srcset="/img/loading.gif" alt="归并排序.png" /></p><pre class="highlight"><code class="c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;Array, <span class="hljs-keyword">int</span> front, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>)</span> </span>{    <span class="hljs-comment">// preconditions:</span>    <span class="hljs-comment">// Array[front...mid] is sorted</span>    <span class="hljs-comment">// Array[mid+1 ... end] is sorted</span>    <span class="hljs-comment">// Copy Array[front ... mid] to LeftSubArray</span>    <span class="hljs-comment">// Copy Array[mid+1 ... end] to RightSubArray</span>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">LeftSubArray</span><span class="hljs-params">(Array.<span class="hljs-built_in">begin</span>() + front, Array.<span class="hljs-built_in">begin</span>() + mid + <span class="hljs-number">1</span>)</span></span>;    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">RightSubArray</span><span class="hljs-params">(Array.<span class="hljs-built_in">begin</span>() + mid + <span class="hljs-number">1</span>, Array.<span class="hljs-built_in">begin</span>() + <span class="hljs-built_in">end</span> + <span class="hljs-number">1</span>)</span></span>;    <span class="hljs-keyword">int</span> idxLeft = <span class="hljs-number">0</span>, idxRight = <span class="hljs-number">0</span>;    LeftSubArray.insert(LeftSubArray.<span class="hljs-built_in">end</span>(), numeric_limits&lt;<span class="hljs-keyword">int</span>&gt;::<span class="hljs-built_in">max</span>());    RightSubArray.insert(RightSubArray.<span class="hljs-built_in">end</span>(), numeric_limits&lt;<span class="hljs-keyword">int</span>&gt;::<span class="hljs-built_in">max</span>());    <span class="hljs-comment">// Pick min of LeftSubArray[idxLeft] and RightSubArray[idxRight], and put into Array[i]</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = front; i &lt;= <span class="hljs-built_in">end</span>; i++) {        <span class="hljs-keyword">if</span> (LeftSubArray[idxLeft] &lt; RightSubArray[idxRight]) {            Array[i] = LeftSubArray[idxLeft];            idxLeft++;        } <span class="hljs-keyword">else</span> {            Array[i] = RightSubArray[idxRight];            idxRight++;        }    }}<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;Array, <span class="hljs-keyword">int</span> front, <span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>)</span> </span>{    <span class="hljs-keyword">if</span> (front &gt;= <span class="hljs-built_in">end</span>)        <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">int</span> mid = front + (<span class="hljs-built_in">end</span> - front) / <span class="hljs-number">2</span>;    MergeSort(Array, front, mid);    MergeSort(Array, mid + <span class="hljs-number">1</span>, <span class="hljs-built_in">end</span>);    Merge(Array, front, mid, <span class="hljs-built_in">end</span>);}</code></pre><h2 id="比较"><a class="markdownIt-Anchor" href="#比较"></a> 比较</h2><table><thead><tr><th>名称</th><th>平均时间复杂度</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>✔︎</td></tr><tr><td>选择排序</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>✖︎</td></tr><tr><td>插入排序</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>✔︎</td></tr><tr><td>桶排序</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td><td>✖︎</td></tr><tr><td>快速排序</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td><td>✖︎</td></tr><tr><td>归并排序(二路)</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td><td>✔︎</td></tr></tbody></table><h2 id="选择"><a class="markdownIt-Anchor" href="#选择"></a> 选择</h2><p><img src="https://i.loli.net/2019/06/28/5d16281e44f2b75052.png" srcset="/img/loading.gif" alt="场景选择.png" /></p>]]></content>
    
    
    <categories>
      
      <category>NOI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>教程-通过一个小项目学习Docker</title>
    <link href="/2019/03/15/%E6%95%99%E7%A8%8B-%E9%80%9A%E8%BF%87%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0Docker/"/>
    <url>/2019/03/15/%E6%95%99%E7%A8%8B-%E9%80%9A%E8%BF%87%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0Docker/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>本次将通过一个小项目&quot;OverWeb&quot;来学习Docker技术</p><blockquote><p>本项目未经安全测试，请勿直接部署于公共环境</p></blockquote><p>项目介绍：在网页上使用基于Docker的VNC容器</p><p>项目地址：<a href="https://github.com/DreamWalkerXZ/OverWeb" target="_blank" rel="noopener">🚀GitHub</a></p><p>成品展示：</p><iframe src="//player.bilibili.com/player.html?aid=46442672&cid=81370958&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"></iframe><h2 id="什么是docker"><a class="markdownIt-Anchor" href="#什么是docker"></a> 什么是Docker</h2><h3 id="维基百科"><a class="markdownIt-Anchor" href="#维基百科"></a> 维基百科</h3><p>Docker是一个开放源代码软件项目，让应用程序部署在软件货柜下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。<br />Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心名字空间（namespaces），来创建独立的容器（containers）。这可以在单一Linux实体下运作，避免引导一个虚拟机造成的额外负担。Linux核心对名字空间的支持完全隔离了工作环境中应用程序的视野，包括进程树、网络、用户ID与挂载文件系统，而核心的cgroup提供资源隔离，包括CPU、存储器、block I/O与网络。从0.9版本起，Dockers在使用抽象虚拟是经由libvirt的LXC与systemd - nspawn提供界面的基础上，开始包括libcontainer库做为以自己的方式开始直接使用由Linux核心提供的虚拟化的设施，</p><h3 id="人话"><a class="markdownIt-Anchor" href="#人话"></a> 人话</h3><p>Docker是一个与宿主系统连接更加直接的“虚拟机”。相比传统的虚拟机它不需要再加一层客户操作系统来实现虚拟化，而是通过linux系统的资源分离机制直接实现虚拟的、与宿主隔离的“容器”。</p><p>图例（第一张为传统虚拟机,第二张为Docker）：</p><p><a href="https://i.loli.net/2019/03/15/5c8b9b8d99266.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/15/5c8b9b8d99266.png" srcset="/img/loading.gif" alt="virtualization.png" /></a><br /><a href="https://i.loli.net/2019/03/15/5c8b9b8d72016.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/15/5c8b9b8d72016.png" srcset="/img/loading.gif" alt="docker.png" /></a></p><h2 id="安装docker"><a class="markdownIt-Anchor" href="#安装docker"></a> 安装Docker</h2><blockquote><p>官方网站上有各种环境下的<a href="https://docs.docker.com/install/" target="_blank" rel="noopener">安装指南</a>，这里主要介绍 Docker CE 在 Ubuntu 、Windows 10 (PC) 和 macOS 上的安装。</p></blockquote><h3 id="docker的版本"><a class="markdownIt-Anchor" href="#docker的版本"></a> Docker的版本</h3><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p><p>Docker CE 分为 stable, test, 和 nightly 三个更新频道。每六个月发布一个 stable 版本 (18.09, 19.03, 19.09…)。</p><h3 id="ubuntu"><a class="markdownIt-Anchor" href="#ubuntu"></a> Ubuntu</h3><h4 id="使用脚本自动安装"><a class="markdownIt-Anchor" href="#使用脚本自动安装"></a> 使用脚本自动安装</h4><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：</p><pre class="highlight"><code class="bash">curl -fsSL get.docker.com -o get-docker.shsudo sh get-docker.sh <span class="hljs-comment"># 国内用户可加上--mirror Aliyun</span>sudo usermod -aG docker 你的用户名<span class="hljs-comment"># 重启你的电脑</span>docker run hello-world <span class="hljs-comment"># 完成!</span></code></pre><h4 id="手动安装"><a class="markdownIt-Anchor" href="#手动安装"></a> 手动安装</h4><h5 id="删除旧版本"><a class="markdownIt-Anchor" href="#删除旧版本"></a> 删除旧版本</h5><pre class="highlight"><code class="bash">sudo apt-get remove docker docker-engine docker.io containerd runc</code></pre><h5 id="设置好repository"><a class="markdownIt-Anchor" href="#设置好repository"></a> 设置好REPOSITORY</h5><pre class="highlight"><code class="bash">sudo apt-get updatesudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    gnupg-agent \    software-properties-commoncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -sudo add-apt-repository \    <span class="hljs-string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \    <span class="hljs-variable">$(lsb_release -cs)</span> \    stable"</span> <span class="hljs-comment"># arch处填写你自己的架构</span>sudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.iosudo usermod -aG docker 你的用户名<span class="hljs-comment"># 重启你的电脑</span>docker run hello-world <span class="hljs-comment"># 完成!</span></code></pre><h3 id="windows-10-pc"><a class="markdownIt-Anchor" href="#windows-10-pc"></a> Windows 10 (PC)</h3><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener">点此下载Community Edition (CE) of Docker for Microsoft Windows</a></p><h3 id="macos"><a class="markdownIt-Anchor" href="#macos"></a> macOS</h3><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">点此下载Community Edition (CE) of Docker Desktop for Mac</a></p><h2 id="使用docker"><a class="markdownIt-Anchor" href="#使用docker"></a> 使用Docker</h2><h3 id="获取镜像"><a class="markdownIt-Anchor" href="#获取镜像"></a> 获取镜像</h3><p>Docker根据一个“镜像”来生成一个容器，这些镜像一般可以在<a href="https://hub.docker.com" target="_blank" rel="noopener">Docker Hub</a>上找到，接下来我们将来获取这些镜像</p><pre class="highlight"><code class="bash">docker pull [选项] [Docker仓库 地址[:端口号]/]镜像名[:标签]</code></pre><p>具体的选项可以通过 docker pull --help 命令看到</p><p>Docker仓库：地址的格式一般是 &lt;域名/IP&gt;[:端口号]。默认地址是 Docker Hub。<br />镜像名：如之前所说，这里的仓库名是两段式名称，即 &lt;用户名&gt;/&lt;镜像名&gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。</p><p>实操</p><pre class="highlight"><code class="bash">docker pull ubuntu:18.04<span class="hljs-comment"># 18.04: Pulling from library/ubuntu</span><span class="hljs-comment"># bf5d46315322: Pull complete</span><span class="hljs-comment"># 9f13e0ac480c: Pull complete</span><span class="hljs-comment"># e8988b5b3097: Pull complete</span><span class="hljs-comment"># 40af181810e7: Pull complete</span><span class="hljs-comment"># e6f7c7e5c03e: Pull complete</span><span class="hljs-comment"># Digest: sha256:147913621d9cdea08853f6ba9116c2e27a3ceffecf3b492983ae97c3d643fbbe</span><span class="hljs-comment"># Status: Downloaded newer image for ubuntu:18.04</span></code></pre><h3 id="使用镜像-容器"><a class="markdownIt-Anchor" href="#使用镜像-容器"></a> 使用镜像 -&gt; 容器</h3><p>主要命令 docker run</p><pre class="highlight"><code class="bash">docker run ubuntu:18.04 /bin/<span class="hljs-built_in">echo</span> <span class="hljs-string">'Hello world'</span><span class="hljs-comment"># Hello world</span></code></pre><p>这时发生了什么：<br />1.Docker根据你给出的镜像名ubuntu:18.04创建出一个容器<br />2.Docker向刚刚创建的容器传入你输入的命令/bin/echo ‘Hello world’<br />3.Docker将容器的输出返回</p><h3 id="更多用法"><a class="markdownIt-Anchor" href="#更多用法"></a> 更多用法</h3><p>Docker的玩法当然远不止这些，不过篇幅所限（懒），给大家推荐一个Docker教程——<a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">Docker —— 从入门到实践</a></p><h2 id="docker的小实践-overweb"><a class="markdownIt-Anchor" href="#docker的小实践-overweb"></a> Docker的小实践 -&gt; OverWeb</h2><h3 id="overweb简介"><a class="markdownIt-Anchor" href="#overweb简介"></a> OverWeb简介</h3><p>在网页上使用基于Docker的VNC容器</p><h3 id="overweb的逻辑图"><a class="markdownIt-Anchor" href="#overweb的逻辑图"></a> OverWeb的逻辑图</h3><p><a href="https://i.loli.net/2019/03/15/5c8baeec90503.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/15/5c8baeec90503.png" srcset="/img/loading.gif" alt="OverWeb.png" /></a></p><h3 id="overweb的文件结构"><a class="markdownIt-Anchor" href="#overweb的文件结构"></a> OverWeb的文件结构</h3><pre class="highlight"><code class="bash">$ tree.├── LICENSE├── README.md├── main.py├── static│   ├── css│   │   ├── mdui.css│   │   ├── mdui.min.css│   │   └── mdui.min.css.map│   ├── fonts│   │   └── roboto│   │       ├── LICENSE.txt│   │       ├── Roboto-Black.woff│   │       ├── Roboto-Black.woff2│   │       ├── Roboto-BlackItalic.woff│   │       ├── Roboto-BlackItalic.woff2│   │       ├── Roboto-Bold.woff│   │       ├── Roboto-Bold.woff2│   │       ├── Roboto-BoldItalic.woff│   │       ├── Roboto-BoldItalic.woff2│   │       ├── Roboto-Light.woff│   │       ├── Roboto-Light.woff2│   │       ├── Roboto-LightItalic.woff│   │       ├── Roboto-LightItalic.woff2│   │       ├── Roboto-Medium.woff│   │       ├── Roboto-Medium.woff2│   │       ├── Roboto-MediumItalic.woff│   │       ├── Roboto-MediumItalic.woff2│   │       ├── Roboto-Regular.woff│   │       ├── Roboto-Regular.woff2│   │       ├── Roboto-RegularItalic.woff│   │       ├── Roboto-RegularItalic.woff2│   │       ├── Roboto-Thin.woff│   │       ├── Roboto-Thin.woff2│   │       ├── Roboto-ThinItalic.woff│   │       └── Roboto-ThinItalic.woff2│   ├── icons│   │   ├── favicon.ico│   │   └── material-icons│   │       ├── LICENSE.txt│   │       ├── MaterialIcons-Regular.ijmap│   │       ├── MaterialIcons-Regular.woff│   │       └── MaterialIcons-Regular.woff2│   └── js│       ├── mdui.js│       ├── mdui.min.js│       └── mdui.min.js.map└── templates    ├── about.html    ├── go.html    └── index.html8 directories, 42 files</code></pre><h3 id="安装运行"><a class="markdownIt-Anchor" href="#安装运行"></a> 安装&amp;运行</h3><pre class="highlight"><code class="bash"><span class="hljs-comment"># 需要Docker以及Python3环境</span>git <span class="hljs-built_in">clone</span> https://github.com/DreamWalkerXZ/OverWeb.git<span class="hljs-built_in">cd</span> ./OverWebdocker pull consol/ubuntu-icewm-vncpip3 install flask --userpython3 main.py</code></pre><h3 id="关键部分"><a class="markdownIt-Anchor" href="#关键部分"></a> 关键部分</h3><pre class="highlight"><code class="python">os.system(<span class="hljs-string">'docker run -d -p %d:6901 -e VNC_PW=%s -e VNC_RESOLUTION=720x720 --name %s consol/ubuntu-icewm-vnc chromium-browser https://www.google.com/'</span> % (port, password, name))</code></pre><p>-p参数(用于端口映射) -p 映射至宿主机的端口:容器内要映射的端口</p><p>-e参数(用于设置容器内的环境变量) -e ENV1=VALUE1 ENV2=VALUE2</p><p>–name参数(用于为容器命名) --name NAME</p><h3 id="mainpy"><a class="markdownIt-Anchor" href="#mainpy"></a> <a href="https://www.github.com" target="_blank" rel="noopener">main.py</a></h3><pre class="highlight"><code class="python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> uuid<span class="hljs-keyword">import</span> random<span class="hljs-keyword">import</span> threading<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, url_forapp = Flask(__name__)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">expireContainer</span><span class="hljs-params">(name)</span>:</span>    print(<span class="hljs-string">'%s will be removed in 10 minutes'</span> % (name))    time.sleep(<span class="hljs-number">10</span>*<span class="hljs-number">60</span>)    print(<span class="hljs-string">'Stopping %s'</span> % (name))    os.system(<span class="hljs-string">'docker stop %s'</span> % (name))    print(<span class="hljs-string">'Removing %s'</span> % (name))    os.system(<span class="hljs-string">'docker rm %s'</span> % (name))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createTmpContainer</span><span class="hljs-params">(port, password, name)</span>:</span>    print(<span class="hljs-string">'Creating %s'</span> % (name))    os.system(<span class="hljs-string">'docker run -d -p %d:6901 -e VNC_PW=%s -e VNC_RESOLUTION=720x720 --name %s consol/ubuntu-icewm-vnc chromium-browser https://www.google.com/'</span> % (port, password, name))    threading.Thread(target=expireContainer, args=(name,)).start()<span class="hljs-meta">@app.route('/')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">'index.html'</span>)<span class="hljs-meta">@app.route('/go')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">go</span><span class="hljs-params">()</span>:</span>    port = <span class="hljs-number">10000</span> + random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">50000</span>)    password = str(uuid.uuid4())    name = str(uuid.uuid4())    createTmpContainer(port, password, name)    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">'go.html'</span>, link=<span class="hljs-string">'http://localhost:%d/?password=%s'</span> % (port, password))<span class="hljs-meta">@app.route('/about')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">about</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">'about.html'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    app.run(host=<span class="hljs-string">'127.0.0.1'</span>, port=<span class="hljs-number">8080</span>, debug=<span class="hljs-literal">True</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>教程-搜索&amp;解析QQ音乐的无损品质音源</title>
    <link href="/2018/12/08/%E6%95%99%E7%A8%8B-%E6%90%9C%E7%B4%A2&amp;%E8%A7%A3%E6%9E%90QQ%E9%9F%B3%E4%B9%90%E6%97%A0%E6%8D%9F%E5%93%81%E8%B4%A8/"/>
    <url>/2018/12/08/%E6%95%99%E7%A8%8B-%E6%90%9C%E7%B4%A2&amp;%E8%A7%A3%E6%9E%90QQ%E9%9F%B3%E4%B9%90%E6%97%A0%E6%8D%9F%E5%93%81%E8%B4%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>目前解析功能已经不可用，搜索功能正常<br />项目地址：<a href="https://github.com/DreamWalkerXZ/QQ_music_direct_link_export" target="_blank" rel="noopener">🚀GitHub</a></p></blockquote><h2 id="1获取数据"><a class="markdownIt-Anchor" href="#1获取数据"></a> 1.获取数据</h2><pre class="highlight"><code class="python">keyword = <span class="hljs-string">'李健'</span>search_api = <span class="hljs-string">'http://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.center&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=50&amp;w='</span> + keyword + <span class="hljs-string">'&amp;jsonpCallback=searchCallbacksong2020&amp;format=json&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0'</span>response = requests.get(search_api).text</code></pre><p><img src="https://s1.ax1x.com/2018/11/10/iqlW9I.png" srcset="/img/loading.gif" alt="搜索数据" /></p><p>即歌曲就在json.loads(response)[‘data’][‘song’][‘list’]中</p><h2 id="2分析数据"><a class="markdownIt-Anchor" href="#2分析数据"></a> 2.分析数据</h2><p>首先我们来看一个解析后的url：</p><pre class="highlight"><code class="python"><span class="hljs-string">'http://streamoc.music.tc.qq.com/M800000PLHrM2luXiz.mp3?vkey=CA23BC73FA35144644BAD2C8E3026425F724AD8AA117AD079FB5812177575B59044EF642A3B422F3A9E7FEFF185839FC163444AD015BB875&amp;guid=DreamWalkerXZ&amp;uin=123456&amp;fromtag=8'</span></code></pre><p>然后把它的参数给分离出来</p><pre class="highlight"><code class="python"><span class="hljs-string">'http://streamoc.music.tc.qq.com/'</span> + prefix + mid + extension + <span class="hljs-string">'?vkey='</span> + vkey + <span class="hljs-string">'&amp;guid='</span> + guid + <span class="hljs-string">'&amp;uin='</span> + uin + <span class="hljs-string">'&amp;fromtag=8'</span></code></pre><h3 id="prefix与extension"><a class="markdownIt-Anchor" href="#prefix与extension"></a> prefix与extension</h3><p>prefix是音频格式的前缀， 与extension相对应</p><table><thead><tr><th>quality</th><th>prefix</th><th>extension</th></tr></thead><tbody><tr><td>dts</td><td>D00A</td><td>.flac</td></tr><tr><td>ape</td><td>A000</td><td>.ape</td></tr><tr><td>flac</td><td>F000</td><td>.flac</td></tr><tr><td>320</td><td>M800</td><td>.mp3</td></tr><tr><td>aac</td><td>C600</td><td>.m4a</td></tr><tr><td>ogg</td><td>O600</td><td>.ogg</td></tr><tr><td>128</td><td>M500</td><td>.mp3</td></tr></tbody></table><p>至于如何判断是否有此品质，只需要在第一步的搜索结果中的json.loads(response)[‘data’][‘song’][‘list’][歌曲位置][‘file’]中判断size_128, size_320, size_aac, size_ape, size_dts, size_flac, size_ogg这几个项的值是否为0即可（为0则代表无此品质）</p><h3 id="mid"><a class="markdownIt-Anchor" href="#mid"></a> mid</h3><p>mid是QQ音乐中每一首歌曲的唯一标识符</p><p>mid即json.loads(response)[‘data’][‘song’][‘list’][歌曲位置][‘mid’]的值</p><h3 id="uin与guid"><a class="markdownIt-Anchor" href="#uin与guid"></a> uin与guid</h3><p>guid和uin随意填充即可, 但是要与后面生成vkey时所填的一致</p><h3 id="vkey"><a class="markdownIt-Anchor" href="#vkey"></a> vkey</h3><p>vkey是一个通过算法生成的具有时效性的字符串</p><p>生成算法如下：</p><pre class="highlight"><code class="python">vkey = json.loads(requests.get(<span class="hljs-string">'http://c.y.qq.com/base/fcgi-bin/fcg_music_express_mobile3.fcg?g_tk=0&amp;loginUin='</span> + uin + <span class="hljs-string">'&amp;hostUin=0&amp;format=json&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0&amp;cid=205361747&amp;uin='</span> + uin + <span class="hljs-string">'&amp;songmid=003a1tne1nSz1Y&amp;filename=C400003a1tne1nSz1Y.m4a&amp;guid='</span> + guid).text)[<span class="hljs-string">'data'</span>][<span class="hljs-string">'items'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'vkey'</span>]<span class="hljs-comment"># 1.注意uin与guid在生成vkey和拼接直链时要一致</span><span class="hljs-comment"># 2.如果服务器在国外，请使用国内的HTTP代理来访问此接口，否则会因为版权问题无法解析</span></code></pre><h2 id="成品"><a class="markdownIt-Anchor" href="#成品"></a> 成品</h2><blockquote><p><a href="http://QQ.py" target="_blank" rel="noopener">QQ.py</a> （类）</p></blockquote><pre class="highlight"><code class="python"><span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> requests<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QQ</span><span class="hljs-params">()</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span><span class="hljs-params">(self, song_name)</span>:</span>        search_url = <span class="hljs-string">'http://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.center&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=50&amp;w='</span> + song_name + <span class="hljs-string">'&amp;jsonpCallback=searchCallbacksong2020&amp;format=json&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0'</span>        search_result = []        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> json.loads(requests.get(search_url).text)[<span class="hljs-string">'data'</span>][<span class="hljs-string">'song'</span>][<span class="hljs-string">'list'</span>]:            name = item[<span class="hljs-string">'name'</span>]            singer = <span class="hljs-string">''</span>.join(singer[<span class="hljs-string">'name'</span>] + <span class="hljs-string">'+'</span> <span class="hljs-keyword">for</span> singer <span class="hljs-keyword">in</span> item[<span class="hljs-string">'singer'</span>]).rstrip(<span class="hljs-string">'+'</span>)            album = item[<span class="hljs-string">'album'</span>][<span class="hljs-string">'name'</span>]            media_mid = item[<span class="hljs-string">'file'</span>][<span class="hljs-string">'media_mid'</span>]            types = []            <span class="hljs-keyword">if</span> item[<span class="hljs-string">'file'</span>][<span class="hljs-string">'size_128'</span>] != <span class="hljs-number">0</span>:                types.append(<span class="hljs-string">'128'</span>)            <span class="hljs-keyword">if</span> item[<span class="hljs-string">'file'</span>][<span class="hljs-string">'size_320'</span>] != <span class="hljs-number">0</span>:                types.append(<span class="hljs-string">'320'</span>)            <span class="hljs-keyword">if</span> item[<span class="hljs-string">'file'</span>][<span class="hljs-string">'size_aac'</span>] != <span class="hljs-number">0</span>:                types.append(<span class="hljs-string">'aac'</span>)            <span class="hljs-keyword">if</span> item[<span class="hljs-string">'file'</span>][<span class="hljs-string">'size_ape'</span>] != <span class="hljs-number">0</span>:                types.append(<span class="hljs-string">'ape'</span>)            <span class="hljs-keyword">if</span> item[<span class="hljs-string">'file'</span>][<span class="hljs-string">'size_dts'</span>] != <span class="hljs-number">0</span>:                types.append(<span class="hljs-string">'dts'</span>)            <span class="hljs-keyword">if</span> item[<span class="hljs-string">'file'</span>][<span class="hljs-string">'size_flac'</span>] != <span class="hljs-number">0</span>:                types.append(<span class="hljs-string">'flac'</span>)            <span class="hljs-keyword">if</span> item[<span class="hljs-string">'file'</span>][<span class="hljs-string">'size_ogg'</span>] != <span class="hljs-number">0</span>:                types.append(<span class="hljs-string">'ogg'</span>)            search_result.append({<span class="hljs-string">'name'</span>: name, <span class="hljs-string">'singer'</span>: singer, <span class="hljs-string">'album'</span>: album, <span class="hljs-string">'media_mid'</span>: media_mid, <span class="hljs-string">'types'</span>: types})        <span class="hljs-keyword">return</span> search_result    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_audio_url</span><span class="hljs-params">(self, media_mid, type)</span>:</span>        <span class="hljs-keyword">if</span> type == <span class="hljs-string">'dts'</span>:            type = {<span class="hljs-string">'prefix'</span>: <span class="hljs-string">'D00A'</span>, <span class="hljs-string">'extension'</span>: <span class="hljs-string">'.flac'</span>}        <span class="hljs-keyword">elif</span> type == <span class="hljs-string">'ape'</span>:            type = {<span class="hljs-string">'prefix'</span>: <span class="hljs-string">'A000'</span>, <span class="hljs-string">'extension'</span>: <span class="hljs-string">'.ape'</span>}        <span class="hljs-keyword">elif</span> type == <span class="hljs-string">'flac'</span>:            type = {<span class="hljs-string">'prefix'</span>: <span class="hljs-string">'F000'</span>, <span class="hljs-string">'extension'</span>: <span class="hljs-string">'.flac'</span>}        <span class="hljs-keyword">elif</span> type == <span class="hljs-string">'320'</span>:            type = {<span class="hljs-string">'prefix'</span>: <span class="hljs-string">'M800'</span>, <span class="hljs-string">'extension'</span>: <span class="hljs-string">'.mp3'</span>}        <span class="hljs-keyword">elif</span> type == <span class="hljs-string">'aac'</span>:            type = {<span class="hljs-string">'prefix'</span>: <span class="hljs-string">'C600'</span>, <span class="hljs-string">'extension'</span>: <span class="hljs-string">'.m4a'</span>}        <span class="hljs-keyword">elif</span> type == <span class="hljs-string">'ogg'</span>:            type = {<span class="hljs-string">'prefix'</span>: <span class="hljs-string">'O600'</span>, <span class="hljs-string">'extension'</span>: <span class="hljs-string">'.ogg'</span>}        <span class="hljs-keyword">elif</span> type == <span class="hljs-string">'128'</span>:            type = {<span class="hljs-string">'prefix'</span>: <span class="hljs-string">'M500'</span>, <span class="hljs-string">'extension'</span>: <span class="hljs-string">'.mp3'</span>}        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">"Invalid type"</span>, type)        uin = <span class="hljs-string">'123456'</span>        guid = <span class="hljs-string">'DreamWalkerXZ'</span>        vkey = json.loads(requests.get(<span class="hljs-string">'http://c.y.qq.com/base/fcgi-bin/fcg_music_express_mobile3.fcg?g_tk=0&amp;loginUin='</span> + uin + <span class="hljs-string">'&amp;hostUin=0&amp;format=json&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0&amp;cid=205361747&amp;uin='</span> + uin + <span class="hljs-string">'&amp;songmid=003a1tne1nSz1Y&amp;filename=C400003a1tne1nSz1Y.m4a&amp;guid='</span> + guid).text)[<span class="hljs-string">'data'</span>][<span class="hljs-string">'items'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'vkey'</span>]        <span class="hljs-keyword">return</span> <span class="hljs-string">'http://streamoc.music.tc.qq.com/'</span> + type[<span class="hljs-string">'prefix'</span>] + media_mid + type[<span class="hljs-string">'extension'</span>] + <span class="hljs-string">'?vkey='</span> + vkey + <span class="hljs-string">'&amp;guid='</span> + guid + <span class="hljs-string">'&amp;uin='</span> + uin + <span class="hljs-string">'&amp;fromtag=8'</span></code></pre><blockquote><p>调用示例</p></blockquote><pre class="highlight"><code class="python"><span class="hljs-keyword">import</span> QQqq = QQ.QQ()<span class="hljs-comment"># 搜索</span>search_result = qq.search(<span class="hljs-string">'李健'</span>)print(search_result)<span class="hljs-comment">###</span>[{<span class="hljs-string">'name'</span>: <span class="hljs-string">'贝加尔湖畔'</span>,  <span class="hljs-string">'singer'</span>: <span class="hljs-string">'李健'</span>,  <span class="hljs-string">'album'</span>: <span class="hljs-string">'依然'</span>,  <span class="hljs-string">'media_mid'</span>: <span class="hljs-string">'000PLHrM2luXiz'</span>,  <span class="hljs-string">'types'</span>: [<span class="hljs-string">'128'</span>, <span class="hljs-string">'320'</span>, <span class="hljs-string">'aac'</span>, <span class="hljs-string">'ape'</span>, <span class="hljs-string">'flac'</span>, <span class="hljs-string">'ogg'</span>]}, {<span class="hljs-string">'name'</span>: <span class="hljs-string">'假如爱有天意'</span>,  <span class="hljs-string">'singer'</span>: <span class="hljs-string">'李健'</span>,  <span class="hljs-string">'album'</span>: <span class="hljs-string">'李健'</span>,  <span class="hljs-string">'media_mid'</span>: <span class="hljs-string">'003u0BdF1aocDJ'</span>,  <span class="hljs-string">'types'</span>: [<span class="hljs-string">'128'</span>, <span class="hljs-string">'320'</span>, <span class="hljs-string">'aac'</span>, <span class="hljs-string">'flac'</span>, <span class="hljs-string">'ogg'</span>]}, ...中间省略... {<span class="hljs-string">'name'</span>: <span class="hljs-string">'日落之前'</span>,  <span class="hljs-string">'singer'</span>: <span class="hljs-string">'李健'</span>,  <span class="hljs-string">'album'</span>: <span class="hljs-string">'李健'</span>,  <span class="hljs-string">'media_mid'</span>: <span class="hljs-string">'0047DwLA1u9FEx'</span>,  <span class="hljs-string">'types'</span>: [<span class="hljs-string">'128'</span>, <span class="hljs-string">'320'</span>, <span class="hljs-string">'aac'</span>, <span class="hljs-string">'ape'</span>, <span class="hljs-string">'dts'</span>, <span class="hljs-string">'flac'</span>, <span class="hljs-string">'ogg'</span>]}]<span class="hljs-comment">###</span><span class="hljs-comment"># 解析</span>audio_url = qq.get_audio_url(<span class="hljs-string">'001Liwq92gKerW'</span>, <span class="hljs-string">'320'</span>)print(audio_url)<span class="hljs-comment">###</span>http://streamoc.music.tc.qq.com/M800001Liwq92gKerW.mp3?vkey=<span class="hljs-number">17E517</span>E90215EB25F6DD717CE479C6E9573EB9505EA633F4909A32725B490ACDF5A934BB8674363A90C8C076104C2412E6FCADCF58FB5DC0&amp;guid=DreamWalkerXZ&amp;uin=<span class="hljs-number">123456</span>&amp;fromtag=<span class="hljs-number">8</span><span class="hljs-comment">###</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QQ音乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
